#!/bin/bash

usage() {
	echo "usage: ${progname} [-C|-P|-q] [-a <platform>] [-c <platform>] [-m <module>]"
	echo "options:"
	echo "       -C: do a full cleanup of build area of the view"
	echo "       -P: do a full production build"
	echo "       -q: do a quick build (parallelize wherever possible)"
	echo "       -a platform: 'all' or one of AP '${ap_platforms}' platforms"
	echo "       -c platform: 'all' or one of Controller '${controller_platforms}' platforms"
	echo "       -m module: 'sos'"
	exit 1
}

validate_platforms() {
	tgt_plats="$1"
	invalid_platforms=
	for cp in ${tgt_cp}; do
		echo "${controller_platforms}" | grep -w ${cp} > /dev/null 2>&1
		if [ $? -ne 0 ]; then
			invalid_platforms="${invalid_platforms} ${cp}"
		fi
	done
	echo "${invalid_platforms}"
}

build_this_platform() {
	this_plat=$1
	tgt_plats="$2"
	if [ "${tgt_plats}" == "all" ]; then
		return 0
	else
		for p in ${tgt_plats}; do
			if [ ${p} == ${this_plat} ]; then
				return 0
			fi
		done
	fi
	return 1
}

build_ap_images() {
	sudo chmod -R 777 /var/www
	for ap in ${ap_platforms}; do
		build=false
		build_this_platform ${ap} "${tgt_ap}"
		if [ $? -eq 0 ]; then
			build=true
		fi
		if [ ${build} == false ]; then
			continue
		fi
		cleanup ${ap}
		printf "Building AP ${ap} - `date` ... "
		echo "== Running mktree of ${ap} - `date`" >> ${logfile}
		adu mktree ${ap} >> ${logfile} 2>&1
		if [ ${quick} == true ]; then
			adu build ${ap} > /dev/null 2>&1 &
			echo "(running in background)"
		else
			echo "== Running build of ${ap} - `date`" >> ${logfile}
			adu build ${ap} >> ${logfile} 2>&1
			if [ $? -eq 0 ]; then
				echo "done"
			else
				echo "failed"
			fi
		fi
	done
}

build_controller_images() {
	for cp in $controller_platforms; do
		build=false
		build_this_platform ${cp} "${tgt_cp}"
		if [ $? -eq 0 ]; then
			build=true
		fi
		if [ ${build} == false ]; then
			continue
		fi
		build_dir_plat=${build_rootdir}/${cp}
		cleanup ${cp}
		printf "Running mktree ${cp} - `date` ... "
		echo "== Running mktree of ${cp} - `date`" >> ${logfile}
		adu mktree $cp >> ${logfile} 2>&1
		echo "done"
		printf "Building Controller ${cp} - `date` ... "
		if [ -n "${module}" ]; then
			echo "== Starting ${module} build of ${cp} - `date`" >> ${logfile}
			adu build $cp =${module}/build: >> ${logfile} 2>&1
			stat=$?
		else
			echo "== Starting build of ${cp} - `date`" >> ${logfile}
			adu build $cp >> ${logfile} 2>&1
			stat=$?
		fi
		echo "== completed build of ${cp} - `date`" >> ${logfile}
		if [ ${stat} -eq 0 ]; then
			echo "done"
			if [ -n "${module}" ]; then
				build_outdir=${build_dir_plat}/${module}/build
				build_objs="`find ${build_outdir} -name ${module}.elf`"
				echo "Build object for ${module} available at:"
				echo "${build_objs}"
			fi
		else
			echo "failed"
			exit 1
		fi
	done
}

cleanup_platform_build() {
	local platform=$1
	local build_dir_plat=${build_rootdir}/${platform}

	printf "Cleanup ${build_dir_plat} ... "
	rm -rf ${build_dir_plat}
	echo "done"
}

cleanup_production() {
	for ap in ${ap_platforms}; do
		cleanup_platform_build ${ap}
	done
	for cp in ${controller_platforms}; do
		cleanup_platform_build ${cp}
	done
}

cleanup() {
	local platform=$1
	local cleanup_modules="cmn/syslog cmn/gsm"

	if [ ${production} == true ]; then
		return
	elif [ ${full_cleanup} == true ]; then
		cleanup_platform_build ${platform}
	else
		for cm in ${cleanup_modules}; do
			printf "== Cleaning up ${cm} for ${platform} - `date` ... "
			adu build ${platform} =${cm}:clean >> ${logfile} 2>&1
			echo "done"
		done
	fi
}

function ctrl_c() {
	echo
	echo "${progname}: cleaning up on CTRL-C"
	for ap in ${ap_platforms}; do
		pid="`ps ax | grep "/usr/local/bin/adu" | grep "${ap}" | grep -v grep | awk '{print $1}'`"
		for p in ${pid}; do
			echo "${progname}: cleaning up AP ${ap} build: ${pid}"
			kill -9 ${pid} > /dev/null 2>&1
		done
	done
	exit 1
}

progname=`basename $0`
logfile=${HOME}/Downloads/logs/${progname}.log
controller_platforms="porfidio grappa shumway opusone"
ap_platforms="ardmore masterson talisker arran springbank octomore x4 glenmorangie"
user=`whoami`
build_rootdir=/data/${user}/adu/build/${P4CLIENT}/Default

[ $# -eq 0 ] && usage

if [ -z "${P4CLIENT}" -o -z "${P4CLIENT_DIR}" ]; then
	echo "${progname}: need to be inside a perforce view to build"
	exit 1
fi

trap ctrl_c INT
tgt_cp=
tgt_ap=
module=
apbuild=false
full_cleanup=false
quick=false
production=false
while getopts ":ha:c:m:CqP" arg; do
	case $arg in
	a) tgt_ap=${OPTARG}
	   apbuild=true
	;;
	c) tgt_cp=${OPTARG}
	;;
	m) module=${OPTARG}
	;;
	C) full_cleanup=true
	;;
	q) quick=true
	;;
	P) production=true
	   apbuild=true
	   tgt_ap="all"
	   tgt_cp="all"
	   quick=true
	;;
	h | *) usage
	;;
	esac
done

mkdir -p `dirname ${logfile}`

echo > ${logfile}

echo "Logfile:" ${logfile}
echo "Client:" ${P4CLIENT}
echo "View:" ${P4CLIENT_DIR}
echo "Production:" ${production}
echo "Quick:" ${quick}
echo "Full cleanup:" ${full_cleanup}
echo "Module:" ${module}
echo "AP-Build:" ${apbuild}
echo "AP Platform(s):" ${tgt_ap}
echo "Controller Platform(s):" ${tgt_cp}

if [ -z "${tgt_cp}" ]; then
	echo "${progname}: missing platform"
	usage
elif [ "${tgt_cp}" != "all" ]; then
	invalid_platforms=`validate_platforms "${tgt_cp}"`
	if [ "${invalid_platforms}" != "" ]; then
		echo "${progname}: ${invalid_platforms} not a recognized platform"
		usage
	fi
fi

cd ${P4CLIENT_DIR}

if [ ${production} == true ]; then
	cleanup_production
fi
if [ -z "${module}" ]; then
	if [ ${apbuild} == true ]; then
		build_ap_images
	fi
fi

build_controller_images

if [ -z "${module}" ]; then
	image_loc=`find /tftpboot -name "ArubaOS_7*${P4CLIENT}*"`
	echo "Images: ${image_loc}"
fi
echo "All done - `date`"
