#!/bin/bash

usage() {
	echo "usage: ${progname} -p <platform> [-m <module>]"
	echo "       platform: 'all' or one of: ${platforms}"
	echo "       module: 'sos'"
	exit 1
}

progname=`basename $0`
logfile=${HOME}/Downloads/logs/${progname}.log
platforms="porfidio nebbiolo grenache grappa shumway"
user=`whoami`
build_rootdir=/data/${user}/adu/build/${P4CLIENT}/Default

[ $# -eq 0 ] && usage

if [ -z "${P4CLIENT}" -o -z "${P4CLIENT_DIR}" ]; then
	echo "${progname}: need to be inside a perforce view to build"
	exit 1
fi

platform=
module=
while getopts ":hp:m:" arg; do
	case $arg in
	p) platform=${OPTARG}
	;;
	m) module=${OPTARG}
	;;
	h | *) usage
	;;
	esac
done

mkdir -p `dirname ${logfile}`

echo > ${logfile}

echo "Logfile:" ${logfile}
echo "Client:" ${P4CLIENT}
echo "View:" ${P4CLIENT_DIR}
echo "Platform:" ${platform}

if [ -z "${platform}" ]; then
	echo "${progname}: missing platform"
	usage
elif [ "${platform}" != "all" ]; then
	echo "${platforms}" | grep -w ${platform} > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "${progname}: ${platform} not a recognized platform"
		usage
	fi
fi

cd ${P4CLIENT_DIR}

for p in $platforms; do
	build=false
	if [ "${platform}" == "all" ]; then
		build=true
	elif [ ${platform} == ${p} ]; then
		build=true
	fi
	if [ ${build} == false ]; then
		continue
	fi
	printf "Building ${p} - `date` ... "
	echo "== Running mktree of ${p} - `date`" >> ${logfile}
	adu mktree $p >> ${logfile} 2>&1
	if [ -n "${module}" ]; then
		echo "== Starting ${module} build of ${p} - `date`" >> ${logfile}
		adu build $p =${module}/build: >> ${logfile} 2>&1
		stat=$?
	else
		echo "== Starting build of ${p} - `date`" >> ${logfile}
		adu build $p >> ${logfile} 2>&1
		stat=$?
	fi
	echo "== completed build of ${p} - `date`" >> ${logfile}
	if [ ${stat} -eq 0 ]; then
		echo "done"
		if [ -n "${module}" ]; then
			build_outdir=${build_rootdir}/$p/${module}/build
			build_objs="`find ${build_outdir} -name ${module}.elf`"
			echo "Build object for ${module} available at:"
			echo "${build_objs}"
		fi
	else
		echo "failed"
	fi
done
if [ -z "${module}" ]; then
	image_loc=`find /tftpboot -name "ArubaOS_7*${P4CLIENT}*"`
	echo "Images: ${image_loc}"
fi
echo "All done - `date`"
