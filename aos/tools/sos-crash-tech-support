#!/bin/bash

usage() {
	echo "usage: ${progname} <view> <crashinfo-path> [options]"
	echo "options:"
	echo "       -p <path>: P4 view root directory (default /data/<login>/adu/views)"
	echo "       -t <path>: AOS tools path (default /usr/local/aos/tools)"
	echo "       -s <view>: view name wherefrom gdbscripts to be picked up"
	exit 1
}

append_print_banner() {
	local comm="$1"
	if [ -z "${comm}" ]; then
		return
	fi
	cat >> ${gdbscript} << EOF
set logging off
shell echo "Running ${comm}"
set logging on
EOF
}

append_gdb_run() {
	local comm="$1"
	if [ -z "${comm}" ]; then
		return
	fi
	cat >> ${gdbscript} << EOF
print "${marker} ${comm}"
$comm
EOF
}

append_gdb_env() {
	cat >> ${gdbscript} << EOF
set logging redirect on
set logging file ${tech_support_log}
set logging on
set print repeat 0
set print pretty on
set pagination off
EOF
}

append_source_dirs() {
	for i in ${gdbscripts}; do
		cat >> ${gdbscript} << EOF
print "${marker} source ${i}"
source -v ${gdbscripts_dir}/${i}
EOF
	done
}

append_basic_core_info() {
cat >> ${gdbscript} << EOF
print "${marker} info files"
info files
EOF
}

append_gdbcomm_runs() {
	n=${#gdbcomms[@]}
	i=0
	while [ $i -lt $n ]; do
		append_print_banner "${gdbcomms[$i]}"
		append_gdb_run "${gdbcomms[$i]}"
		i=`expr $i + 1`
	done
}

append_gdbproc_runs() {
	n=${#gdbprocs[@]}
	i=0
	while [ $i -lt $n ]; do
		append_print_banner "${gdbprocs[$i]}"
		append_gdb_run "${gdbprocs[$i]}"
		i=`expr $i + 1`
	done
}

append_quit() {
	cat >> ${gdbscript} << EOF
quit
EOF
}

create_gdbscript() {
	echo > ${gdbscript}
	append_gdb_env
	append_basic_core_info
	append_gdbcomm_runs
	append_source_dirs
	append_gdbproc_runs
	append_quit
}

run_gdb() {
	p4view_opt=
	if [ -n "${P4VIEW_ROOTDIR}" ]; then
		p4view_opt="-p ${P4VIEW_ROOTDIR}"
	fi
	tools_opt=
	if [ -n "${AOS_TOOLS_DIR}" ]; then
		tools_opt="-t ${AOS_TOOLS_DIR}"
	fi
	${sos_crash_debug} ${P4CLIENT} ${crashdump_path} -x ${gdbscript} ${tools_opt} ${p4view_opt}
}

cleanup_gdbscript() {
	rm -f ${gdbscript}
}

abspath() {
	local path=$1
	case $f in
	/*)	abspath=${path}
		;;
	*)	abspath=$PWD/${path}
		;;
	esac
	echo "${abspath}"
}

finalize_log() {
	sed -e 's/''\$''.*= "=======/"(gdb)/g' ${tech_support_log} | sed -e 's/"//g' > ${tech_support_log}.$$
	log_final_location=${crashdump_path}/`basename ${tech_support_log}`
	log_final_path=`abspath ${log_final_location}`
	mv ${tech_support_log}.$$ ${log_final_path}
	echo "Tech Support Log location: ${log_final_path}"
}

gdbscripts="\
	bridge.gdb \
	python/bridge.py \
	bwm.gdb \
	python/bwm.py \
	ip_reasm.gdb \
	python/ip_reasm.py \
	routecache.gdb \
	python/routecache.py \
	route_table_hash.gdb \
	python/route_table_hash.py \
	python/session.gdb \
	python/session.py \
	station.gdb \
	python/station.py \
	trace.gdb \
	tunnel.gdb \
	python/tunnel.py \
	user.gdb \
	python/user.py \
	wifi_reasm.gdb \
	python/wifi_reasm.py \
	xlp/cpu.gdb \
	xlp/python/cpu.py \
	xlp/dma.gdb \
	xlp/python/dma.py \
	xlp/sbeth.gdb \
	xlp/python/sbeth.py \
	xlp/stats.gdb \
	xlp/python/stats.py \
	xlp/vlan.gdb \
	xlp/python/vlan.py \
	xlp/malloc.gdb \
	xlp/python/malloc.py \
"

gdbprocs=(\
'print_cpu_allocation' \
'print_cpu_utilization' \
'print_heap' \
'dump_all_stats' \
'stall_detect' \
'bridge_table_dump' \
'print_all_bwms' \
'print_dma_info' \
'wifi_reasm_table' \
'ip_reasm_table' \
'sbeth_leak_stats_summary' \
'sbeth_print_freelist' \
'sbeth_sae_leak_walk' \
'route_cache_dump' \
'route_table_dump' \
'sess_table_print_v4 1' \
'station_dump' \
'tunnel_dump' \
'user_table_hash_dump' \
'user_pend_dump' \
'vlan_table_dump' \
'trace_dump_fwd_max 100' \
)

gdbcomms=(\
'info threads' \
'thread apply all backtrace' \
'thread apply all backtrace full' \
'print sos_sys_info'
'print stats.maint'
)

progname=`basename $0`
P4CLIENT=$1
crashdump_path=$2
timestamp=`date +"%Y%m%d%H%M%S"`
tech_support_log=/var/tmp/${progname}.${timestamp}.txt
gdbscript=/var/tmp/gdbscript.$$
marker="======="

if [ -z "${P4CLIENT}" ]; then
	echo "${progname}: missing view name"
	usage
fi

if [ -z "${crashdump_path}" ]; then
	echo "${progname}: missing crashdump path"
	usage
fi

shift;shift

while getopts ":p:t:s:" arg; do
	case ${arg} in
	p)
	P4VIEW_ROOTDIR=${OPTARG}
	;;
	s)
	GDBSCRIPTS_CLIENT=${OPTARG}
	;;
	t)
	AOS_TOOLS_DIR=${OPTARG}
	;;
	*)
	echo "${progname}: invalid option ${arg}"
	usage
	;;
	esac
done

user=`whoami`
P4VIEWDIR_DEF=/data/${user}/adu/views
P4CLIENT_DIR=${P4VIEW_ROOTDIR:-${P4VIEWDIR_DEF}}/${P4CLIENT}
if [ -n "${GDBSCRIPTS_CLIENT}" ]; then
	gdbscripts_dir=${P4VIEW_ROOTDIR:-${P4VIEWDIR_DEF}}/${GDBSCRIPTS_CLIENT}/sos/gdbscripts
else
	gdbscripts_dir=${P4CLIENT_DIR}/sos/gdbscripts
fi
if [ ! -d ${gdbscripts_dir} ]; then
	echo "${progname}: ${gdbscripts_dir} not found"
	exit 1
fi

AOS_TOOLS_DEF=/usr/local/aos/tools
AOS_TOOLS=${AOS_TOOLS_DIR:-${AOS_TOOLS_DEF}}
sos_crash_debug=${AOS_TOOLS}/sos-crash-debug

echo "Crashdump path: ${crashdump_path}"
echo "Tech Support Log location: ${tech_support_log}"
echo "AOS Tools: ${AOS_TOOLS}"
echo "P4 client path: ${P4CLIENT_DIR}" 

create_gdbscript
run_gdb
cleanup_gdbscript
finalize_log
