#!/bin/bash

usage() {
	echo "usage: ${progname} <view> <crashinfo-path> [options]"
	echo "arguments:"
	echo "       view: name of any perforce view for obtaining cross tool location"
	echo "       crashinfo-path: path to top of your crashinfo location"
	echo "options:"
	echo "       -n: donot cleanup temporary files after reading corefile"
	echo "       -x <script>: run specified gdbscript at startup"
	echo "       -p <path>: P4 view root directory (default /data/<login>/adu/views)"
	echo "       -t <path>: AOS tools path (default /usr/local/aos/tools)"
	exit 1
}

sos7z_to_core() {
	sos7z=sos.7z
	sos_core="`find . -name sos.core*`"
	if [ -n "${sos_core}" ] && [ -f ${sos_core} ]; then
		echo "${progname}: using $PWD/${sos_core}"
		return
	fi
	if [ ! -f ${sos7z} ]; then
		echo "${progname}: missing ${sos7z}, cannot extract ${sos_core}"
		exit 1
	fi
	if [ ! -f ${z2soscore} ]; then
		echo "${progname}: missing ${z2soscore}, cannot extract ${sos_core}"
		exit 1
	fi
	printf "Converting ${sos7z} to sos.core, please wait ... "
	${z2soscore} ${sos7z} > ${logfile} 2>&1
	echo done
	sos_core="`find . -name sos.core*`"
	if [ -n "${sos_core}" ] && [ -f ${sos_core} ]; then
		echo "${progname}: using $PWD/${sos_core}"
	else
		echo "${progname}: unable to extract ${sos_core}"
		exit 1
	fi
}

download_syms_tar() {
	build_server=10.1.1.41
	tftpuser=tftpfips
	tfppass=tftpfips
	if [ -f symbols.tar.gz ]; then
		echo "${progname}: using symbols.tar.gz"
		return
	fi
	printf "Downloading symbols.tar.gz from ${build_server}, please wait ... "
	sshpass -p ${tfppass} scp ${tftpuser}@${build_server}:/tftpboot/symbols/${label}/symbols.tar.gz .
	echo done
}

extract_sym_file() {
	symfile_path=`find home -name sos.${platform}.elf.symbols 2> /dev/null | grep Aruba`
	if [ -z "${symfile_path}" ]; then
		printf "Extracting sos.${platform}.elf.symbols from symbols.tar.gz, please wait ... "
		tar -xzf symbols.tar.gz --no-anchored sos.${platform}.elf.symbols
		echo done
		symfile_path=`find home -name sos.${platform}.elf.symbols 2> /dev/null | grep Aruba`
	fi
}

copy_sym_file() {
	symfile_path=`find . -name sos.elf.symbols 2> /dev/null`
	if [ -z "${symfile_path}" ]; then
		symfile_path=`find ${P4CLIENT_BUILD} -name sos.elf.symbols 2> /dev/null | grep -i ${platform}_obj`
		if [ -z "${symfile_path}" ]; then
			echo "${progname}: unable to find sos.elf.symbols in ${P4CLIENT_BUILD}"
			exit 1
		fi
		echo "${progname}: copying ${symfile_path} to ${PWD}"
		cp ${symfile_path} .
		symfile_path=${PWD}/sos.elf.symbols
	fi
	echo "${progname}: using ${symfile_path}"
}

run_gdb() {
	if [ ! -f ${symfile_path} ]; then
		echo "${progname}: missing ${symfile_path}"
		return
	fi
	if [ ! -f ${sos_core} ]; then
		echo "${progname}: missing ${sos_core}"
		return
	fi
	${mips_xgdb} ${gdb_addl_opts} ${symfile_path} ${sos_core}
}

cleanup() {
	printf "Cleaning up, please wait ... "
	rm -rf ${sos_core} ${symfile_path} symbols.tar.gz
	echo done
}

progname=`basename $0`
P4CLIENT=$1
crashinfo_path=$2
logfile=/var/tmp/${progname}.log

if [ -z "${P4CLIENT}" ]; then
	usage
fi

if [ -z "${crashinfo_path}" ]; then
	usage
fi

if [ ! -d ${crashinfo_path} ]; then
	echo "${progname}: ${crashinfo_path} does not exist"
	exit 1
fi

shift;shift
do_cleanup=true
gdb_addl_opts=
P4VIEW_ROOTDIR=
AOS_TOOLS_DIR=
while getopts ":nx:p:t:" arg; do
	case ${arg} in
	n) do_cleanup=false
	;;
	x)
	gdb_addl_opts="-q -x ${OPTARG}"
	;;
	p)
	P4VIEW_ROOTDIR=${OPTARG}
	;;
	t)
	AOS_TOOLS_DIR=${OPTARG}
	;;
	*)
	echo "${progname}: invalid option ${arg}"
	usage
	;;
	esac
done

AOS_TOOLS_DEF=/usr/local/aos/tools
z2soscore=${AOS_TOOLS_DIR:-${AOS_TOOLS_DEF}}/7z2soscore

user=`whoami`
P4VIEWDIR_DEF=/data/${user}/adu/views
P4CLIENT_DIR=${P4VIEW_ROOTDIR:-${P4VIEWDIR_DEF}}/${P4CLIENT}
P4CLIENT_BUILD=`echo ${P4CLIENT_DIR} | sed -e 's/views/build/g'`
export ARUBA_SRC=${P4CLIENT_DIR}
export PYTHONHOME=$P4CLIENT_DIR/tools/python/python-2.7.2
mips_xgdb=$P4CLIENT_DIR/tools/mipscross-xlp/linux/bin/mips64-nlm-linux-gdb
if [ ! -d ${P4CLIENT_DIR} ]; then
	echo "${progname}: ${P4CLIENT_DIR} does not map to a valid view"
	exit 1
fi
export SHELL=/bin/bash

echo > ${logfile}

if [ ! -d ${crashinfo_path} ]; then
	echo "${progname}: missing ${crashinfo_path}"
	exit 1
fi
cd ${crashinfo_path}
if [ ! -f machineInfo ]; then
	echo "${progname}: missing machineInfo in ${crashinfo_path}"
	exit 1
fi
platform=`grep -a MODEL machineInfo | awk -F: '{print $2}' | awk '{print $1}' | awk -F")" '{print $1}' | sed 's/Aruba//g' | awk -F- '{print $1}' | tr "[:upper:]" "[:lower:]"`
if [ -z "${platform}" ]; then
	echo "${progname}: unable to determine platform from machineInfo"
	exit 1
fi
label=`sed -n -e '/Default boot/,/--------/ p' machineInfo | grep -a Label | awk '{print $3}'`
if [ -z "${label}" ]; then
	echo "${progname}: unable to determine label from machineInfo"
	exit 1
fi
is_private_build=`echo ${label} | grep ${user}`

echo "Crashinfo Path:" ${crashinfo_path}
echo "MIPS xGDB:" ${mips_xgdb}
echo "Platform:" ${platform}
echo "Label:" ${label}

sos7z_to_core
if [ -n "${is_private_build}" ]; then
	copy_sym_file
else
	download_syms_tar
	extract_sym_file
fi
run_gdb
if [ ${do_cleanup} == true ]; then
	cleanup
fi
exit 0
