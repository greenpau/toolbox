#!/usr/bin/python

import sys
import os
import getopt
import time

sys.path.append("/usr/local/aos/pylib/wlan")
import wlan_controller

sys.path.append("/usr/local/aos/pylib/system")
import shell

def usage():
	print "usage: " + progname + " <device> <options>"
	print "options:"
	print "    -s: status of a specified controller"
	print "    -t: enable telnet at specified device"
	print "    -T: establish a telnet session with specified device"
	print "    -c: generate a controller datapath coredump"
	exit(1)

def main(argc, argv):
	if (argc == 1):
		usage()
	try:
		opts, args = getopt.getopt(argv[1:], "htTcs");
	except getopt.GetoptError as err:
		print progname + ": invalid argument, " + str(err)
		usage()
	device = argv[0]
	telnet = False
	enable_telnet = False
	dp_core = False
	status = False
	for opt, arg in opts:
		if opt == "-t":
			enable_telnet = True
		elif opt == "-T":
			telnet = True
		elif opt == "-c":
			dp_core = True
		elif opt == "-s":
			status = True

	if (device == ""):
		print progname + ": need a controller device to operate on"
		usage()

	if shell.is_alive(device) == False:
		print progname + ": controller " + device + " appears to be down"
		return
	c = wlan_controller.Device(device)

	if (telnet == True):
		c.telnet_session()
	elif (enable_telnet == True):
		c.enable_telnet()
	elif (dp_core == True):
		c.gen_dp_core()
		print "Waiting for " + device + " to reboot, please wait"
		while (True):
			sys.stdout.write(".")
			sys.stdout.flush()
			time.sleep(5)
			if (shell.is_alive(device) == True):
				break
		print
		print "Controller " + device + " is now alive"
		if c.tar_crash() == True:
			time.sleep(5)
			dst_user = shell.whoami()
			dst_host_canon = "dev-" + dst_user
			dst_host = shell.getent(dst_host_canon)
			c.scp_crash(dst_user, dst_host, "/var/tmp")
	elif (status == True):
		platid = c.get_platid()
		boot_partition = c.get_boot_partition()
		sw_vers, build_number, label, build_date = c.get_boot_image_version()
		print "Platform: %s" %platid
		print "Boot Information:"
		print "\tPartition: %s" %boot_partition
		print "\tSW Version (build): %s (%s)" % (sw_vers, build_number)
		print "\tLabel: %s" % (label)
		print "\tBuild Date: %s" % (build_date)
	else:
		usage()

if __name__ == "__main__":
	argc = len(sys.argv)
	progfile = os.path.basename(sys.argv[0])
	progname = progfile.split(".")[0]
	main(argc, sys.argv[1:])

